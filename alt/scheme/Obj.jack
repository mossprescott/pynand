/* Decoding and inspection of values encoded into words in memory. */
class Obj {
    function boolean isInt(Obj obj) {
        return obj > -1;
    }

    function boolean isRib(Obj obj) {
        return obj < 0;
    }

    /* Convert to a native 16-bit int value. */
    function int untagInt(Obj obj) {
        // TODO: (optionally) check the tag bit

        // If bit 14 is set, the value is negative and we need to extend the sign bit.
        if (~((obj & 16384) = 0)) {    // 0x4000
            return obj | (32767 + 1);  // 0x8000 (32768 would overflow)
        }
        // Otherwise, the sign bit is already correct:
        else {
            return obj;
        }
    }

    /* Convert to a raw pointer. */
    function Rib untagRib(Obj obj) {
        // TODO: (optionally) check the tag bit

        return -(obj + obj + obj);
    }

    /* Strip off the sign bit. */
    function Obj tagInt(int x) {
        return x & 32767;  // 0x7FFF
    }

    /*
    Encode a ptr into Obj. You don't want to be doing this at runtime, but during initialization
    is probably ok.
    */
    function Obj tagRibSlow(Rib ptr) {
        var Obj obj;
        let obj = -Interpreter.divide(ptr, 3);
        // TODO: verify ptr was a multiple of 3
        return obj;
    }
}