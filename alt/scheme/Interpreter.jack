class Interpreter {
    // For any kind of efficiency, the compiler wants to allocate these pointers as statics in the
    // usual range (starting at addr 16). And ordinarily its own stack state is stored in
    // locations 0-3 or so.
    // For that matter, its stack grows up from 256 (which is fine as long as it doesn't collide
    // with the screen buffer at 2048.)
    static Rib stack;
    static Rib pc;
    static Rib nextRib;

    // Pre-allocated "proc" containing the "rib" primitive, which will be used to construct every
    // other primitive.
    static Rib ribRib;

    // Pre-allocated special values:
    static Rib ribFalse;
    static Rib ribTrue;
    static Rib ribNil;

    // Used only during intialization:
    static Array symbolNameTableStart;
    static Array symbolNameTableEnd;

    static Array tty;  // DEBUG

    /*
     When we arrive here, the assembly prelude has already initialized many of the statics with the
     starting values.
     */
    function void main() {
        var int opcode;
        var Rib symbol;
        var Rib proc, code, cont, newStack;
        var int slot;
        var Rib ptr;

        // Initialize some more state:

        let tty = 4095;  // DEBUG

        // Bottom of the "heap" area:
        let nextRib = 32767 + 1;  // Note: will overflow to -32768

        do Interpreter.initSymbolTable();

        // Skip the bogus "main" instr:
        let pc = pc[2];

        while (1) {
            let opcode = pc[0];

            if (opcode = 0) {
                if (pc[2] = 0) {
                    // jump

                    let symbol = Interpreter.getTarget(pc[1]);  // actually an entry or symbol
                    let proc = symbol[0];

                    if (proc[0] & (~31)) {  // not between 0 and 31
                        // closure

                        let cont = Interpreter.findContinuation();

                        // Note: can't overwrite the old continuation because it may be in ROM
                        let cont = Interpreter.alloc(cont[0], proc, cont[2]);

                        let stack = Interpreter.wrangleClosureParams(proc, cont);

                        let code = proc[0];
                        let pc = code[2];
                    }
                    else {
                        // primitive

                        do Interpreter.handlePrimitive(proc[0]);

                        let cont = Interpreter.findContinuation();

                        // Overwrite top stack entry so the stack consists of the just-pushed
                        // result on top of the saved stack from the continuation.
                        let stack[1] = cont[0];

                        // PC = next instruction from the continuation
                        let pc = cont[2];
                    }
                }
                else {
                    // call

                    let symbol = Interpreter.getTarget(pc[1]);  // actually an entry or symbol
                    let proc = symbol[0];

                    if (proc[0] & (~31)) {  // not between 0 and 31
                        // closure

                        // New continuation:
                        //   x = saved stack (after popping args)
                        //   y = proc rib
                        //   z = next instruction
                        let cont = Interpreter.alloc(-1, proc, pc[2]);
                        let newStack = Interpreter.wrangleClosureParams(proc, cont);
                        let cont[0] = stack;
                        let stack = newStack;

                        // Now jump to the entry point of the proc:
                        let code = proc[0];
                        let pc = code[2];
                    }
                    else {
                        // primitive
                        do Interpreter.handlePrimitive(proc[0]);

                        let pc = pc[2];
                    }
                }
            }
            else {
            if (opcode = 1) {
                // set

                let symbol = Interpreter.getTarget(pc[1]);  // actually an entry or symbol

                let symbol[0] = Interpreter.pop();

                let pc = pc[2];
            }
            else {
            if (opcode = 2) {
                // get

                let symbol = Interpreter.getTarget(pc[1]);  // actually an entry or symbol

                do Interpreter.push(symbol[0]);

                let pc = pc[2];
            }
            else {
            if (opcode = 3) {
                // const
                do Interpreter.push(pc[1]);
                let pc = pc[2];
            }
            else {
            if (opcode = 4) {
                // if
                do Interpreter.halt();  // TODO
            }
            else {
            // if (opcode = 5) {
            // halt
                do Interpreter.halt();
            // }
            }}}}}
        }

        return;
    }



    /**
    Allocate symbols (which must be in RAM so their values can be updated in place) and the
    pairs that form the list that is the symbol table.
    The decoded instructions in ROM refer to the addresses where these symbols are expected to
    located in memory.
    */
    function void initSymbolTable() {
        var Array ptr;
        var Rib symbol;
        var Rib entry;

        let entry = ribNil;
        let ptr = symbolNameTableStart;
        while (ptr < symbolNameTableEnd) {
            // let tty[0] = ptr; // DEBUG
            let symbol = Interpreter.alloc(ptr[1], ptr[0], 2);  // symbol type
            let entry = Interpreter.alloc(symbol, entry, 0);  // pair type
            let ptr = ptr + 2;
        }

        return;
    }

    /**
     Decode the "y" value from a jump/.call, set, or get instruction, and return the rib that
     contains the target, which might be a stack entry or a symbol. In either case, the actual
     target is found in the "x" field of the result.
     */
    function Rib getTarget(int slotOrGlobal) {
        var int i;
        var Rib ptr;
        var Rib symbol;

        if ((slotOrGlobal > -1) & (slotOrGlobal < 1000)) {
            let i = slotOrGlobal;
            // y is slot # of target
            let ptr = stack;
            while (i > 0) {
                let ptr = ptr[1];
                let i = i - 1;
            }
            return ptr;
        }
        else {
            // y is addr of target symbol
            let symbol = pc[1];
            return symbol;
        }
    }

    /**
     Pop numArgs objects from the stack, assembling them into a new stack (in reverse order),
     on top of the just-allocated continuation rib.
     */
    function Rib wrangleClosureParams(Rib proc, Rib cont) {
        var Rib code;
        var int numArgs, i;
        var Rib newStack;

        let code = proc[0];
        let numArgs = code[0];
        let i = 0;
        let newStack = cont;
        while (i < numArgs) {
            let newStack = Interpreter.alloc(Interpreter.pop(), newStack, 0);
            let i = i + 1;
        }
        return newStack;
    }

    function void handlePrimitive(int opcode) {
        var int x, y, z;
        var Rib tmp;

        // Note: What you really want here is a computed jump (i.e. a switch construct.)
        // Failing that, we make do with a binary search, effectively, with 5 branches
        // to examine the 5 bits of the opcode.

        if (opcode < 16) {
            if (opcode < 8) {
                if (opcode < 4) {
                    if (opcode < 2) {
                        if (opcode < 1) {
                            // 0
                            // rib: x y z -- rib(x, y, z)
                            // Note: one rib becomes garbage (top entry of stack)

                            let z = stack[0];

                            let tmp = stack[1];
                            let y = tmp[0];

                            // The entry holding x will be the new top of stack:
                            let stack = tmp[1];
                            let x = stack[0];

                            // Now re-use the second entry's rib as the newly-constructed rib:
                            let tmp[0] = x;
                            let tmp[1] = y;
                            let tmp[2] = z;
                            let stack[0] = tmp;
                        }
                        else {
                            // 1
                            // id: --

                            // Literally nothing to see here
                        }
                    }
                    else { // opcode >= 2
                        if (opcode < 3) {
                            // 2
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                        else {
                            // 3
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                    }
                }
                else { // opcode >= 4
                    if (opcode < 6) {
                        if (opcode < 5) {
                            // 4
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                        else {
                            // 5
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                    }
                    else { // opcode >= 6
                        if (opcode < 7) {
                            // 6
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                        else {
                            // 7
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                    }
                }
            }
            else {  // opcode >= 8
                if (opcode < 12) {
                    if (opcode < 10) {
                        if (opcode < 9) {
                            // 8
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                        else {
                            // 9
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                    }
                    else { // opcode >= 10
                        if (opcode < 11) {
                            // 10
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                        else {
                            // 11
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                    }
                }
                else { // opcode >= 12
                    if (opcode < 14) {
                        if (opcode < 13) {
                            // 12
                            // TODO
                            let tty[0] = opcode; // DEBUG
                            do Intepreter.halt();
                        }
                        else {
                            // 13
                            // <: x y -- bool(x < y)

                            // Note: one rib becomes garbage:
                            let y = Interpreter.pop();
                            let x = stack[0];
                            // Update second stack entry in place:
                            if (x < y) {
                                let stack[0] = ribTrue;
                            }
                            else {
                                let stack[0] = ribFalse;
                            }
                        }
                    }
                    else { // opcode >= 14
                        if (opcode < 15) {
                            // 14
                            // +: x y -- (x + y)

                            // Note: one rib becomes garbage:
                            let y = Interpreter.pop();
                            let x = stack[0];
                            // Update second stack entry in place:
                            let stack[0] = x + y;
                        }
                        else {
                            // 15
                            // -: x y -- (x - y)

                            // Note: one rib becomes garbage:
                            let y = Interpreter.pop();
                            let x = stack[0];
                            // Update second stack entry in place:
                            let stack[0] = x - y;
                        }
                    }
                }
            }
        }
        else {
            let tty[0] = opcode; // DEBUG
            do Intepreter.halt();
        }
        return;
    }


    /** Allocate a rib on the heap, filling in the three fields. */
    function Rib alloc(int x, int y, int z) {
        var Rib r;
        let r = nextRib;
        // let tty[0] = r; // DEBUG
        let r[0] = x;
        let r[1] = y;
        let r[2] = z;
        let nextRib = nextRib + 3;
        return r;
    }

    function void push(int obj) {
        let stack = Interpreter.alloc(obj, stack, 0); // pair-type
        return;
    }

    /** Discard the top entry from the stack, return its CAR. */
    function int pop() {
        var int r;
        let r = stack[0];
        let stack = stack[1];
        return r;
    }

    /**
     Address of the continuation rib in the current stack frame: the first entry in the
     stack with z != 0.
     */
    function Rib findContinuation() {
        var Rib ptr;

        let ptr = stack;
        while (ptr[2] = 0) {
            let ptr = ptr[1];
        }
        return ptr;
    }

    function void halt() {
        while (1) {
            // let tty[0] = -1; // DEBUG
        }
    }
}
